/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.mavenproject1;

import java.nio.charset.Charset;
import java.util.ArrayList;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.rdf.model.RDFNode;
import org.w3c.dom.NameList;

import javax.swing.JPanel;

/**
 *
 * @author mohgh
 */
public class DisplayFrame extends javax.swing.JFrame {

    /**
     * Creates new form DisplayFrame
     */
    
    public ArrayList<String> ListNames =new ArrayList<>();
    public ArrayList<String> InstanceNames =new ArrayList<>();
    
    public ArrayList<String> VariantsNames =new ArrayList<>();
    public ArrayList<String> VariantsURIs =new ArrayList<>();
    public ArrayList<String> SameEngModels =new ArrayList<>();
    public ArrayList<String> SamePerfModels =new ArrayList<>();
    public ArrayList<String> SameTransmissionModels =new ArrayList<>();
    
    public DisplayFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        ModelNamesComboBox = new javax.swing.JComboBox<>();
        variantsComboBox = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        EnginePanel = new javax.swing.JPanel();
        EngineLabel = new javax.swing.JLabel();
        CylLabel1 = new javax.swing.JLabel();
        CapLabel2 = new javax.swing.JLabel();
        AspLabel3 = new javax.swing.JLabel();
        LayoutLabel4 = new javax.swing.JLabel();
        SameEngSpecLabel = new javax.swing.JLabel();
        EngineLabel1 = new javax.swing.JLabel();
        CylLabel2 = new javax.swing.JLabel();
        CapLabel3 = new javax.swing.JLabel();
        AspLabel4 = new javax.swing.JLabel();
        LayoutLabel5 = new javax.swing.JLabel();
        SameEngComboBox1 = new javax.swing.JComboBox<>();
        PerfPanel = new javax.swing.JPanel();
        PerfLabel1 = new javax.swing.JLabel();
        PerfLabel2 = new javax.swing.JLabel();
        PerfPowerLabel1 = new javax.swing.JLabel();
        PerfPowerLabel2 = new javax.swing.JLabel();
        PerfTorqueLabel1 = new javax.swing.JLabel();
        PerfTorqueLabel2 = new javax.swing.JLabel();
        PerfDrivetrainLabel1 = new javax.swing.JLabel();
        PerfDrivetrainLabel2 = new javax.swing.JLabel();
        SameEngSpecLabel1 = new javax.swing.JLabel();
        SamePerfComboBox2 = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        SameTComboBox3 = new javax.swing.JComboBox<>();
        SameEngSpecLabel2 = new javax.swing.JLabel();
        TGearsLabel1 = new javax.swing.JLabel();
        TGearsLabel2 = new javax.swing.JLabel();
        TLabel2 = new javax.swing.JLabel();
        TLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        EngineLabel2 = new javax.swing.JLabel();
        MiscModelName2 = new javax.swing.JLabel();
        CylLabel3 = new javax.swing.JLabel();
        MiscModelType2 = new javax.swing.JLabel();
        MiscUnits2 = new javax.swing.JLabel();
        CapLabel5 = new javax.swing.JLabel();
        AspLabel5 = new javax.swing.JLabel();
        MiscBodystyle2 = new javax.swing.JLabel();
        LayoutLabel6 = new javax.swing.JLabel();
        MiscBodyMat2 = new javax.swing.JLabel();
        MiscWhlBolt2 = new javax.swing.JLabel();
        CapLabel7 = new javax.swing.JLabel();
        AspLabel7 = new javax.swing.JLabel();
        MiscWhlSpokes2 = new javax.swing.JLabel();
        LayoutLabel8 = new javax.swing.JLabel();
        MiscWhlMat2 = new javax.swing.JLabel();
        CapLabel8 = new javax.swing.JLabel();
        MiscManufacturer2 = new javax.swing.JLabel();
        CapLabel11 = new javax.swing.JLabel();
        MiscLoc2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Display Base Models");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Display Variants for Selected Base Model");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        ModelNamesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        variantsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton3.setText("Display Spec");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Display Spec");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(variantsComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ModelNamesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(5, 5, 5)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(jButton1))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(71, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(69, 69, 69))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(ModelNamesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(variantsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        EngineLabel.setText("Engine Label");

        CylLabel1.setText("No. of cylinders");

        CapLabel2.setText("Capacity");

        AspLabel3.setText("Aspiration");

        LayoutLabel4.setText("Layout");

        SameEngSpecLabel.setText("Models with same spec");

        EngineLabel1.setText("Engine Label");

        CylLabel2.setText("No. of cylinders");

        CapLabel3.setText("Capacity");

        AspLabel4.setText("Aspiration");

        LayoutLabel5.setText("Layout");

        SameEngComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout EnginePanelLayout = new javax.swing.GroupLayout(EnginePanel);
        EnginePanel.setLayout(EnginePanelLayout);
        EnginePanelLayout.setHorizontalGroup(
            EnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EnginePanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(EnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LayoutLabel4)
                    .addComponent(AspLabel3)
                    .addComponent(CapLabel2)
                    .addComponent(CylLabel1)
                    .addComponent(EngineLabel)
                    .addComponent(SameEngSpecLabel))
                .addGap(68, 68, 68)
                .addGroup(EnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EngineLabel1)
                    .addComponent(CylLabel2)
                    .addComponent(CapLabel3)
                    .addComponent(AspLabel4)
                    .addComponent(LayoutLabel5)
                    .addComponent(SameEngComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(234, Short.MAX_VALUE))
        );
        EnginePanelLayout.setVerticalGroup(
            EnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EnginePanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(EnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EngineLabel)
                    .addComponent(EngineLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CylLabel1)
                    .addComponent(CylLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CapLabel2)
                    .addComponent(CapLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AspLabel3)
                    .addComponent(AspLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LayoutLabel4)
                    .addComponent(LayoutLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SameEngSpecLabel)
                    .addComponent(SameEngComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(106, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Engine", EnginePanel);
        EnginePanel.getAccessibleContext().setAccessibleName("");

        PerfLabel1.setText("Performance Spec");

        PerfLabel2.setText("Performance Package");

        PerfPowerLabel1.setText("Power");

        PerfPowerLabel2.setText("Power");

        PerfTorqueLabel1.setText("Torque");

        PerfTorqueLabel2.setText("Torque");

        PerfDrivetrainLabel1.setText("Drivetrain");

        PerfDrivetrainLabel2.setText("Drivetrain");

        SameEngSpecLabel1.setText("Models with same spec");

        SamePerfComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout PerfPanelLayout = new javax.swing.GroupLayout(PerfPanel);
        PerfPanel.setLayout(PerfPanelLayout);
        PerfPanelLayout.setHorizontalGroup(
            PerfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PerfPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(PerfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PerfDrivetrainLabel1)
                    .addComponent(PerfTorqueLabel1)
                    .addComponent(PerfPowerLabel1)
                    .addComponent(PerfLabel1)
                    .addComponent(SameEngSpecLabel1))
                .addGap(68, 68, 68)
                .addGroup(PerfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PerfLabel2)
                    .addComponent(PerfPowerLabel2)
                    .addComponent(PerfTorqueLabel2)
                    .addComponent(PerfDrivetrainLabel2)
                    .addComponent(SamePerfComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(244, Short.MAX_VALUE))
        );
        PerfPanelLayout.setVerticalGroup(
            PerfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PerfPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(PerfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PerfLabel1)
                    .addComponent(PerfLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PerfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PerfPowerLabel1)
                    .addComponent(PerfPowerLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PerfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PerfTorqueLabel1)
                    .addComponent(PerfTorqueLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PerfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PerfDrivetrainLabel1)
                    .addComponent(PerfDrivetrainLabel2))
                .addGap(18, 18, 18)
                .addGroup(PerfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SameEngSpecLabel1)
                    .addComponent(SamePerfComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(117, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Performance", PerfPanel);

        SameTComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        SameEngSpecLabel2.setText("Models with same spec");

        TGearsLabel1.setText("No. of gears");

        TGearsLabel2.setText("0");

        TLabel2.setText("Transmission");

        TLabel1.setText("Transmission Type");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TGearsLabel1)
                    .addComponent(TLabel1)
                    .addComponent(SameEngSpecLabel2))
                .addGap(68, 68, 68)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TLabel2)
                    .addComponent(TGearsLabel2)
                    .addComponent(SameTComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(240, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TLabel1)
                    .addComponent(TLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TGearsLabel1)
                    .addComponent(TGearsLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SameEngSpecLabel2)
                    .addComponent(SameTComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(166, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Transmission", jPanel5);

        EngineLabel2.setText("Model name");

        MiscModelName2.setText("Text");

        CylLabel3.setText("Model type");

        MiscModelType2.setText("Text");

        MiscUnits2.setText("Text");

        CapLabel5.setText("No. of units");

        AspLabel5.setText("Bodystyle");

        MiscBodystyle2.setText("Text");

        LayoutLabel6.setText("Body material");

        MiscBodyMat2.setText("Text");

        MiscWhlBolt2.setText("Text");

        CapLabel7.setText("Wheel bolting");

        AspLabel7.setText("No. of spokes");

        MiscWhlSpokes2.setText("Text");

        LayoutLabel8.setText("Wheel material");

        MiscWhlMat2.setText("Text");

        CapLabel8.setText("Manufacturer");

        MiscManufacturer2.setText("Text");

        CapLabel11.setText("Location");

        MiscLoc2.setText("Text");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CapLabel5)
                    .addComponent(CylLabel3)
                    .addComponent(EngineLabel2)
                    .addComponent(CapLabel8)
                    .addComponent(CapLabel11))
                .addGap(73, 73, 73)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MiscLoc2)
                    .addComponent(MiscManufacturer2)
                    .addComponent(MiscModelName2)
                    .addComponent(MiscModelType2)
                    .addComponent(MiscUnits2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 178, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LayoutLabel6)
                    .addComponent(AspLabel5)
                    .addComponent(LayoutLabel8)
                    .addComponent(AspLabel7)
                    .addComponent(CapLabel7))
                .addGap(60, 60, 60)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MiscWhlBolt2)
                    .addComponent(MiscWhlSpokes2)
                    .addComponent(MiscWhlMat2)
                    .addComponent(MiscBodystyle2)
                    .addComponent(MiscBodyMat2))
                .addGap(155, 155, 155))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EngineLabel2)
                            .addComponent(MiscModelName2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CylLabel3)
                            .addComponent(MiscModelType2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CapLabel5)
                            .addComponent(MiscUnits2))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CapLabel8)
                            .addComponent(MiscManufacturer2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CapLabel11)
                            .addComponent(MiscLoc2)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AspLabel5)
                            .addComponent(MiscBodystyle2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LayoutLabel6)
                            .addComponent(MiscBodyMat2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CapLabel7)
                            .addComponent(MiscWhlBolt2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AspLabel7)
                            .addComponent(MiscWhlSpokes2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LayoutLabel8)
                            .addComponent(MiscWhlMat2))))
                .addContainerGap(103, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Misc", jPanel3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("TabbedPane");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            System.out.println("Getting Base Model Names");  // get the activity list 
            // OntModel model = OpenOWL.OpenConnectOWL();
            String queryString;
            queryString = "PREFIX rdf: <http://www.w.org/1999/02/22-rdf-syntax-ns#> " +
                        "PREFIX owl: <http://www.w3.org/2002/07/owl#> " +
                        "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> " +
                        "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> " +
                        "PREFIX uri: <http://www.semanticweb.org/mohgh/ontologies/2023/4/untitled-ontology-5/> " +
                        "SELECT (str(?xLabel) as ?ModelName) (str(?x) as ?ModelURI) " +
                        "WHERE { " +
                        "?x a uri:BaseModel. " +
                        "?x uri:label ?xLabel. "+     
                        "}";

            //all method ExecSparQl from OpenOWL class
            org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString);
            ListNames.clear();
            InstanceNames.clear();
            while (results.hasNext()) {
                // System.out.println("entered here");
                // ByteArrayOutputStream go = new ByteArrayOutputStream(); 
                //  ResultSetFormatter.out((OutputStream)go ,results,  );
                // String x =  new String(go.toByteArray(), "UTF-8");
                
                QuerySolution soln = results.nextSolution();
                
                String NameOfModel = soln.getLiteral("ModelName").getString();
                System.out.println("Base Model Name: " + NameOfModel.toString());
                ListNames.add(NameOfModel.toString());
                
                String ModelURI = soln.getLiteral("ModelURI").getString();
                System.out.println("Model URI " + ModelURI.toString());
                InstanceNames.add(ModelURI.toString());

                RDFNode x = soln.get("Propertyval");
                String xx = String.valueOf(x);
                java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);
                String xs = xxx.toString();

            }
            
            ModelNamesComboBox.removeAllItems(); //  combobox activity
            
            for (int i = 0; i < ListNames.size(); i++) {
                // jTextArea1.setFont(new java.awt.Font("Lucida Console", 0, 10));
                ModelNamesComboBox.addItem(ListNames.get(i));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        System.out.println(ModelNamesComboBox.getSelectedItem());
        System.out.println(ModelNamesComboBox.getSelectedIndex());
        System.out.println(InstanceNames.get(ModelNamesComboBox.getSelectedIndex()));
        try {
            System.out.println("Getting Variants Names for Selected Model");  // get the activity list 
            // OntModel model = OpenOWL.OpenConnectOWL();
            String queryString;
            queryString = "PREFIX rdf: <http://www.w.org/1999/02/22-rdf-syntax-ns#> " +
                        "PREFIX owl: <http://www.w3.org/2002/07/owl#> " +
                        "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> " +
                        "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> " +
                        "PREFIX uri: <http://www.semanticweb.org/mohgh/ontologies/2023/4/untitled-ontology-5/> " +
                        "SELECT (str(?xLabel) as ?ModelName) (str(?x) as ?ModelURI) " +
                        "WHERE { " +
                        "?x uri:hasBaseModel <" + InstanceNames.get(ModelNamesComboBox.getSelectedIndex()) + 
                        ">. " + 
                        "?x uri:label ?xLabel. "+     
                        "}";

            //all method ExecSparQl from OpenOWL class
            org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString);
            VariantsNames.clear();
            VariantsURIs.clear();
            while (results.hasNext()) {
                
                QuerySolution soln = results.nextSolution();
                
                String NameOfModel = soln.getLiteral("ModelName").getString();
                System.out.println("Variant Model Name: " + NameOfModel.toString());
                VariantsNames.add(NameOfModel.toString());
                
                String ModelURI = soln.getLiteral("ModelURI").getString();
                System.out.println("Model URI " + ModelURI.toString());
                VariantsURIs.add(ModelURI.toString());

                RDFNode x = soln.get("Propertyval");
                String xx = String.valueOf(x);
                java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);
                String xs = xxx.toString();

            }
            
            variantsComboBox.removeAllItems(); //  combobox activity
            
            for (int i = 0; i < VariantsNames.size(); i++) {
                // jTextArea1.setFont(new java.awt.Font("Lucida Console", 0, 10));
                variantsComboBox.addItem(VariantsNames.get(i));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    // get spec for selected base model
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        // TODO add your handling code here:
        
        System.out.println(ModelNamesComboBox.getSelectedItem());
        System.out.println(ModelNamesComboBox.getSelectedIndex());
        System.out.println(InstanceNames.get(ModelNamesComboBox.getSelectedIndex()));
        String baseModelURI = "<" + InstanceNames.get(ModelNamesComboBox.getSelectedIndex()) + ">";
        try {
            System.out.println("Getting Specs for Selected Base Model");  // get the activity list 
            // OntModel model = OpenOWL.OpenConnectOWL();
            String queryString;
            queryString = "PREFIX rdf: <http://www.w.org/1999/02/22-rdf-syntax-ns#> \n" +
                        "PREFIX owl: <http://www.w3.org/2002/07/owl#> \n" +
                        "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
                        "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n" +
                        "PREFIX uri: <http://www.semanticweb.org/mohgh/ontologies/2023/4/untitled-ontology-5/>\n" +
                        
                        "SELECT (str(?a) as ?Label) (str(?b) as ?Cylinders) (str(?c) as ?Aspiration) (str(?d) as ?Capacity) (str(?e) as ?Layout) (str(?xLabel) as ?ModelLabel)\n" +
                        "WHERE {\n" +
                        "\n" +
                        baseModelURI + " uri:hasEngineSpec ?EngSpec.\n" +
                        "?EngSpec uri:label ?a.\n" +
                        "?EngSpec uri:engineCylinders ?b.\n" +
                        "?EngSpec uri:engineAspiration ?c.\n" +
                        "?EngSpec uri:engineCapacity ?d.\n" +
                        "?EngSpec uri:engineLayout ?e.\n" +
                        "?x uri:hasEngineSpec ?EngSpec.\n" +
                        "?x uri:label ?xLabel.\n" +
//                        "FILTER (?x != (" + baseModelURI + ")).\n" +
                        "}";

            //all method ExecSparQl from OpenOWL class
            org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString);
//            VariantsNames.clear();
//            VariantsURIs.clear();
            SameEngModels.clear();
            
            String EngineLabel = "";
            String AspLabel = "";
            String CapLabel = "";
            String CylLabel = "";
            String LayoutLabel = "";
            
            while (results.hasNext()) {
                
                QuerySolution soln = results.nextSolution();
                
                EngineLabel = soln.getLiteral("Label").getString();
                AspLabel = soln.getLiteral("Aspiration").getString();
                CapLabel = soln.getLiteral("Capacity").getString();
                LayoutLabel = soln.getLiteral("Layout").getString();
                CylLabel = soln.getLiteral("Cylinders").getString();
                
                
                String SameEngineModels = soln.getLiteral("ModelLabel").getString();
                System.out.println("Model Label " + SameEngineModels.toString());
                SameEngModels.add(SameEngineModels.toString());

                RDFNode x = soln.get("Propertyval");
                String xx = String.valueOf(x);
                java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);
                String xs = xxx.toString();

            }
            
            SameEngComboBox1.removeAllItems(); //  combobox activity
            
            for (int i = 0; i < SameEngModels.size(); i++) {
                SameEngComboBox1.addItem(SameEngModels.get(i));
            }
            
            EngineLabel1.setText(EngineLabel);
            AspLabel4.setText(AspLabel);
            CapLabel3.setText(CapLabel);
            CylLabel2.setText(CylLabel);
            LayoutLabel5.setText(LayoutLabel);
            SameEngSpecLabel.setText("Models with same spec ("+ SameEngModels.size()+")");
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        
        
        
        
        try {
            System.out.println("Getting Performance Specs for Selected Base Model");  // get the activity list 
            // OntModel model = OpenOWL.OpenConnectOWL();
            System.out.println(baseModelURI);
            String queryString;
            queryString = "PREFIX rdf: <http://www.w.org/1999/02/22-rdf-syntax-ns#> \n" +
                        "PREFIX owl: <http://www.w3.org/2002/07/owl#> \n" +
                        "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
                        "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n" +
                        "PREFIX uri: <http://www.semanticweb.org/mohgh/ontologies/2023/4/untitled-ontology-5/>\n" +
                        
                        "SELECT (str(?a) as ?Label) (str(?b) as ?Drivetrain) (str(?c) as ?Power) (str(?d) as ?Torque) (str(?xLabel) as ?ModelLabel)\n" +
                        "WHERE {\n" +
                        "\n" +
                        baseModelURI + " uri:hasPerformanceSpec ?PerfSpec.\n" +
                        "?PerfSpec uri:label ?a.\n" +
                        "?PerfSpec uri:drivetrain ?b.\n" +
                        "?PerfSpec uri:power ?c.\n" +
                        "?PerfSpec uri:torque ?d.\n" +
                        "?x uri:hasPerformanceSpec ?PerfSpec.\n" +
                        "?x uri:label ?xLabel.\n" +
                        "}";

            //all method ExecSparQl from OpenOWL class
            org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString);
//            VariantsNames.clear();
//            VariantsURIs.clear();
            SamePerfModels.clear();
            
            String DrivetrainLabel = "";
            String PowerLabel = "";
            String TorqueLabel = "";
            String PerfLabel = "";
            
            while (results.hasNext()) {
                
                QuerySolution soln = results.nextSolution();
                
                PerfLabel = soln.getLiteral("Label").getString();
                TorqueLabel = soln.getLiteral("Torque").getString();
                PowerLabel = soln.getLiteral("Power").getString();
                DrivetrainLabel = soln.getLiteral("Drivetrain").getString();
                
                
                String SameModels = soln.getLiteral("ModelLabel").getString();
                System.out.println("Model Label " + SameModels.toString());
                SamePerfModels.add(SameModels.toString());

                RDFNode x = soln.get("Propertyval");
                String xx = String.valueOf(x);
                java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);
                String xs = xxx.toString();

            }
            
            SamePerfComboBox2.removeAllItems(); //  combobox activity
            
            for (int i = 0; i < SamePerfModels.size(); i++) {
                SamePerfComboBox2.addItem(SamePerfModels.get(i));
            }
            
            PerfLabel2.setText(PerfLabel);
            PerfTorqueLabel2.setText(TorqueLabel);
            PerfPowerLabel2.setText(PowerLabel);
            PerfDrivetrainLabel2.setText(DrivetrainLabel);
            SameEngSpecLabel1.setText("Models with same spec ("+ SamePerfModels.size()+")");
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        
        
        
        
        
        try {
            System.out.println("Getting Transmission Specs for Selected Base Model");  // get the activity list 
            // OntModel model = OpenOWL.OpenConnectOWL();
            String queryString;
            queryString = "PREFIX rdf: <http://www.w.org/1999/02/22-rdf-syntax-ns#> \n" +
                        "PREFIX owl: <http://www.w3.org/2002/07/owl#> \n" +
                        "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
                        "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n" +
                        "PREFIX uri: <http://www.semanticweb.org/mohgh/ontologies/2023/4/untitled-ontology-5/>\n" +
                        
                        "SELECT (str(?a) as ?Label) (str(?b) as ?numOfGears) (str(?xLabel) as ?ModelLabel)\n" +
                        "WHERE {\n" +
                        "\n" +
                        baseModelURI + " uri:hasTransmission ?TSpec.\n" +
                        "?TSpec uri:label ?a.\n" +
                        "?TSpec uri:numOfGears ?b.\n" +
                        "?x uri:hasTransmission ?TSpec.\n" +
                        "?x uri:label ?xLabel.\n" +
                        "}";

            //all method ExecSparQl from OpenOWL class
            org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString);
//            VariantsNames.clear();
//            VariantsURIs.clear();
            SameTransmissionModels.clear();
            
            String TransmissionLabel = "";
            String NumOfGearsLabel = "";
            
            while (results.hasNext()) {
                
                QuerySolution soln = results.nextSolution();
                
                TransmissionLabel = soln.getLiteral("Label").getString();
                NumOfGearsLabel = soln.getLiteral("numOfGears").getString();
                
                String SameModels = soln.getLiteral("ModelLabel").getString();
                System.out.println("Model Label " + SameModels.toString());
                SameTransmissionModels.add(SameModels.toString());

                RDFNode x = soln.get("Propertyval");
                String xx = String.valueOf(x);
                java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);
                String xs = xxx.toString();

            }
            
            SameTComboBox3.removeAllItems(); //  combobox activity
            
            for (int i = 0; i < SameTransmissionModels.size(); i++) {
                SameTComboBox3.addItem(SameTransmissionModels.get(i));
            }
            
            TLabel2.setText(TransmissionLabel);
            TGearsLabel2.setText(NumOfGearsLabel);
            SameEngSpecLabel2.setText("Models with same spec ("+ SameTransmissionModels.size()+")");
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        
        
        
        try {
            System.out.println("Getting Misc Specs for Selected Base Model");  // get the activity list 
            // OntModel model = OpenOWL.OpenConnectOWL();
            String queryString;
            queryString = "PREFIX rdf: <http://www.w.org/1999/02/22-rdf-syntax-ns#>\n" +
                        "PREFIX owl: <http://www.w3.org/2002/07/owl#>\n" +
                        "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
                        "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n" +
                        "PREFIX uri: <http://www.semanticweb.org/mohgh/ontologies/2023/4/untitled-ontology-5/>\n" +
                        "SELECT (str(?a) as ?Label) (str(?b) as ?Units) (str(?c) as ?VersionType) (str(?e) as ?Body) (str(?f) as ?BodyMat) (str(?h) as ?Spokes) (str(?i) as ?Bolting) (str(?j) as ?WhlMat)\n" +
                        "(str(?k) as ?MakerLabel) (str(?l) as ?MakerLoc)\n" +
                        "WHERE {\n" +
                        baseModelURI + " uri:label ?a.\n" +
                        baseModelURI + " uri:numOfUnits ?b.\n" +
                        baseModelURI + " uri:versionType ?c.\n" +
                        "\n" +
                        baseModelURI + " uri:hasBodystyle ?d.\n" +
                        "?d uri:material ?f.\n" +
                        "?d uri:label ?e. \n" +
                        "\n" +
                        baseModelURI + " uri:hasWheelType ?g.\n" +
                        "?g uri:numOfSpokes ?h.\n" +
                        "?g uri:wheelBolting ?i.\n" +
                        "?g uri:material ?j.\n" +
                        "\n" +
                        "?maker uri:makesModel " + baseModelURI + ".\n" +
                        "?maker uri:label ?k.\n" +
                        "?maker uri:manufacturerLocation ?l.\n" +
                        "\n" +
                        "}";

            //all method ExecSparQl from OpenOWL class
            org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString);
//            VariantsNames.clear();
//            VariantsURIs.clear();
            
            String modLabel = "";
            String Units = "";
            String VersionType = "";
            String Body = "";
            String BodyMat = "";
            String Spokes = "";
            String Bolting = "";
            String WhlMat = "";
            String MakerLabel = "";
            String MakerLoc = "";
            
            while (results.hasNext()) {
                
                QuerySolution soln = results.nextSolution();
                
                modLabel = soln.getLiteral("Label").getString();
                System.out.println(modLabel + VersionType);
                Units = soln.getLiteral("Units").getString();
                VersionType = soln.getLiteral("VersionType").getString();
                Body = soln.getLiteral("Body").getString();
                BodyMat = soln.getLiteral("BodyMat").getString();
                Spokes = soln.getLiteral("Spokes").getString();
                Bolting = soln.getLiteral("Bolting").getString();
                WhlMat = soln.getLiteral("WhlMat").getString();
                MakerLabel = soln.getLiteral("MakerLabel").getString();
                MakerLoc = soln.getLiteral("MakerLoc").getString();
                
                RDFNode x = soln.get("Propertyval");
                String xx = String.valueOf(x);
                java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);
                String xs = xxx.toString();

            }
            MiscBodyMat2.setText(BodyMat);
            MiscBodystyle2.setText(Body);
            MiscLoc2.setText(MakerLoc);
            MiscManufacturer2.setText(MakerLabel);
            MiscModelName2.setText(modLabel);
            MiscModelType2.setText(VersionType);
//            MiscRoofMat2.setText();
//            MiscRoofMech2.setText();
            MiscUnits2.setText(Units);
            MiscWhlBolt2.setText(Bolting);
            MiscWhlMat2.setText(WhlMat);
            MiscWhlSpokes2.setText(Spokes);

        } catch (Exception ex) {
            ex.printStackTrace();
        }        
        
        
        
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        System.out.println(variantsComboBox.getSelectedItem());
        System.out.println(variantsComboBox.getSelectedIndex());
        System.out.println(VariantsURIs.get(variantsComboBox.getSelectedIndex()));
        String baseModelURI = "<" + VariantsURIs.get(variantsComboBox.getSelectedIndex()) + ">";
        try {
            System.out.println("Getting Specs for Selected Base Model");  // get the activity list 
            // OntModel model = OpenOWL.OpenConnectOWL();
            String queryString;
            queryString = "PREFIX rdf: <http://www.w.org/1999/02/22-rdf-syntax-ns#> \n" +
                        "PREFIX owl: <http://www.w3.org/2002/07/owl#> \n" +
                        "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
                        "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n" +
                        "PREFIX uri: <http://www.semanticweb.org/mohgh/ontologies/2023/4/untitled-ontology-5/>\n" +
                        
                        "SELECT (str(?a) as ?Label) (str(?b) as ?Cylinders) (str(?c) as ?Aspiration) (str(?d) as ?Capacity) (str(?e) as ?Layout) (str(?xLabel) as ?ModelLabel)\n" +
                        "WHERE {\n" +
                        "\n" +
                        baseModelURI + " uri:hasEngineSpec ?EngSpec.\n" +
                        "?EngSpec uri:label ?a.\n" +
                        "?EngSpec uri:engineCylinders ?b.\n" +
                        "?EngSpec uri:engineAspiration ?c.\n" +
                        "?EngSpec uri:engineCapacity ?d.\n" +
                        "?EngSpec uri:engineLayout ?e.\n" +
                        "?x uri:hasEngineSpec ?EngSpec.\n" +
                        "?x uri:label ?xLabel.\n" +
//                        "FILTER (?x != (" + baseModelURI + ")).\n" +
                        "}";

            //all method ExecSparQl from OpenOWL class
            org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString);
//            VariantsNames.clear();
//            VariantsURIs.clear();
            SameEngModels.clear();
            
            String EngineLabel = "";
            String AspLabel = "";
            String CapLabel = "";
            String CylLabel = "";
            String LayoutLabel = "";
            
            while (results.hasNext()) {
                
                QuerySolution soln = results.nextSolution();
                
                EngineLabel = soln.getLiteral("Label").getString();
                AspLabel = soln.getLiteral("Aspiration").getString();
                CapLabel = soln.getLiteral("Capacity").getString();
                LayoutLabel = soln.getLiteral("Layout").getString();
                CylLabel = soln.getLiteral("Cylinders").getString();
                
                
                String SameEngineModels = soln.getLiteral("ModelLabel").getString();
                System.out.println("Model Label " + SameEngineModels.toString());
                SameEngModels.add(SameEngineModels.toString());

                RDFNode x = soln.get("Propertyval");
                String xx = String.valueOf(x);
                java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);
                String xs = xxx.toString();

            }
            
            SameEngComboBox1.removeAllItems(); //  combobox activity
            
            for (int i = 0; i < SameEngModels.size(); i++) {
                SameEngComboBox1.addItem(SameEngModels.get(i));
            }
            
            EngineLabel1.setText(EngineLabel);
            AspLabel4.setText(AspLabel);
            CapLabel3.setText(CapLabel);
            CylLabel2.setText(CylLabel);
            LayoutLabel5.setText(LayoutLabel);
            SameEngSpecLabel.setText("Models with same spec ("+ SameEngModels.size()+")");
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        
        
        
        
        try {
            System.out.println("Getting Performance Specs for Selected Base Model");  // get the activity list 
            // OntModel model = OpenOWL.OpenConnectOWL();
            System.out.println(baseModelURI);
            String queryString;
            queryString = "PREFIX rdf: <http://www.w.org/1999/02/22-rdf-syntax-ns#> \n" +
                        "PREFIX owl: <http://www.w3.org/2002/07/owl#> \n" +
                        "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
                        "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n" +
                        "PREFIX uri: <http://www.semanticweb.org/mohgh/ontologies/2023/4/untitled-ontology-5/>\n" +
                        
                        "SELECT (str(?a) as ?Label) (str(?b) as ?Drivetrain) (str(?c) as ?Power) (str(?d) as ?Torque) (str(?xLabel) as ?ModelLabel)\n" +
                        "WHERE {\n" +
                        "\n" +
                        baseModelURI + " uri:hasPerformanceSpec ?PerfSpec.\n" +
                        "?PerfSpec uri:label ?a.\n" +
                        "?PerfSpec uri:drivetrain ?b.\n" +
                        "?PerfSpec uri:power ?c.\n" +
                        "?PerfSpec uri:torque ?d.\n" +
                        "?x uri:hasPerformanceSpec ?PerfSpec.\n" +
                        "?x uri:label ?xLabel.\n" +
                        "}";

            //all method ExecSparQl from OpenOWL class
            org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString);
//            VariantsNames.clear();
//            VariantsURIs.clear();
            SamePerfModels.clear();
            
            String DrivetrainLabel = "";
            String PowerLabel = "";
            String TorqueLabel = "";
            String PerfLabel = "";
            
            while (results.hasNext()) {
                
                QuerySolution soln = results.nextSolution();
                
                PerfLabel = soln.getLiteral("Label").getString();
                TorqueLabel = soln.getLiteral("Torque").getString();
                PowerLabel = soln.getLiteral("Power").getString();
                DrivetrainLabel = soln.getLiteral("Drivetrain").getString();
                
                
                String SameModels = soln.getLiteral("ModelLabel").getString();
                System.out.println("Model Label " + SameModels.toString());
                SamePerfModels.add(SameModels.toString());

                RDFNode x = soln.get("Propertyval");
                String xx = String.valueOf(x);
                java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);
                String xs = xxx.toString();

            }
            
            SamePerfComboBox2.removeAllItems(); //  combobox activity
            
            for (int i = 0; i < SamePerfModels.size(); i++) {
                SamePerfComboBox2.addItem(SamePerfModels.get(i));
            }
            
            PerfLabel2.setText(PerfLabel);
            PerfTorqueLabel2.setText(TorqueLabel);
            PerfPowerLabel2.setText(PowerLabel);
            PerfDrivetrainLabel2.setText(DrivetrainLabel);
            SameEngSpecLabel1.setText("Models with same spec ("+ SamePerfModels.size()+")");
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        
        
        
        
        
        try {
            System.out.println("Getting Transmission Specs for Selected Base Model");  // get the activity list 
            // OntModel model = OpenOWL.OpenConnectOWL();
            String queryString;
            queryString = "PREFIX rdf: <http://www.w.org/1999/02/22-rdf-syntax-ns#> \n" +
                        "PREFIX owl: <http://www.w3.org/2002/07/owl#> \n" +
                        "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
                        "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n" +
                        "PREFIX uri: <http://www.semanticweb.org/mohgh/ontologies/2023/4/untitled-ontology-5/>\n" +
                        
                        "SELECT (str(?a) as ?Label) (str(?b) as ?numOfGears) (str(?xLabel) as ?ModelLabel)\n" +
                        "WHERE {\n" +
                        "\n" +
                        baseModelURI + " uri:hasTransmission ?TSpec.\n" +
                        "?TSpec uri:label ?a.\n" +
                        "?TSpec uri:numOfGears ?b.\n" +
                        "?x uri:hasTransmission ?TSpec.\n" +
                        "?x uri:label ?xLabel.\n" +
                        "}";

            //all method ExecSparQl from OpenOWL class
            org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString);
//            VariantsNames.clear();
//            VariantsURIs.clear();
            SameTransmissionModels.clear();
            
            String TransmissionLabel = "";
            String NumOfGearsLabel = "";
            
            while (results.hasNext()) {
                
                QuerySolution soln = results.nextSolution();
                
                TransmissionLabel = soln.getLiteral("Label").getString();
                NumOfGearsLabel = soln.getLiteral("numOfGears").getString();
                
                String SameModels = soln.getLiteral("ModelLabel").getString();
                System.out.println("Model Label " + SameModels.toString());
                SameTransmissionModels.add(SameModels.toString());

                RDFNode x = soln.get("Propertyval");
                String xx = String.valueOf(x);
                java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);
                String xs = xxx.toString();

            }
            
            SameTComboBox3.removeAllItems(); //  combobox activity
            
            for (int i = 0; i < SameTransmissionModels.size(); i++) {
                SameTComboBox3.addItem(SameTransmissionModels.get(i));
            }
            
            TLabel2.setText(TransmissionLabel);
            TGearsLabel2.setText(NumOfGearsLabel);
            SameEngSpecLabel2.setText("Models with same spec ("+ SameTransmissionModels.size()+")");
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        
        
        
        try {
            System.out.println("Getting Misc Specs for Selected Base Model");  // get the activity list 
            // OntModel model = OpenOWL.OpenConnectOWL();
            String queryString;
            queryString = "PREFIX rdf: <http://www.w.org/1999/02/22-rdf-syntax-ns#>\n" +
                        "PREFIX owl: <http://www.w3.org/2002/07/owl#>\n" +
                        "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
                        "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n" +
                        "PREFIX uri: <http://www.semanticweb.org/mohgh/ontologies/2023/4/untitled-ontology-5/>\n" +
                        "SELECT (str(?a) as ?Label) (str(?b) as ?Units) (str(?c) as ?VersionType) (str(?e) as ?Body) (str(?f) as ?BodyMat) (str(?h) as ?Spokes) (str(?i) as ?Bolting) (str(?j) as ?WhlMat)\n" +
                        "(str(?k) as ?MakerLabel) (str(?l) as ?MakerLoc)\n" +
                        "WHERE {\n" +
                        baseModelURI + " uri:label ?a.\n" +
                        baseModelURI + " uri:numOfUnits ?b.\n" +
                        baseModelURI + " uri:versionType ?c.\n" +
                        "\n" +
                        baseModelURI + " uri:hasBodystyle ?d.\n" +
                        "?d uri:material ?f.\n" +
                        "?d uri:label ?e. \n" +
                        "\n" +
                        baseModelURI + " uri:hasWheelType ?g.\n" +
                        "?g uri:numOfSpokes ?h.\n" +
                        "?g uri:wheelBolting ?i.\n" +
                        "?g uri:material ?j.\n" +
                        "\n" +
                        "?maker uri:makesModel " + baseModelURI + ".\n" +
                        "?maker uri:label ?k.\n" +
                        "?maker uri:manufacturerLocation ?l.\n" +
                        "\n" +
                        "}";

            //all method ExecSparQl from OpenOWL class
            org.apache.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString);
//            VariantsNames.clear();
//            VariantsURIs.clear();
            
            String modLabel = "";
            String Units = "";
            String VersionType = "";
            String Body = "";
            String BodyMat = "";
            String Spokes = "";
            String Bolting = "";
            String WhlMat = "";
            String MakerLabel = "";
            String MakerLoc = "";
            
            while (results.hasNext()) {
                
                QuerySolution soln = results.nextSolution();
                
                modLabel = soln.getLiteral("Label").getString();
                System.out.println(modLabel + VersionType);
                Units = soln.getLiteral("Units").getString();
                VersionType = soln.getLiteral("VersionType").getString();
                Body = soln.getLiteral("Body").getString();
                BodyMat = soln.getLiteral("BodyMat").getString();
                Spokes = soln.getLiteral("Spokes").getString();
                Bolting = soln.getLiteral("Bolting").getString();
                WhlMat = soln.getLiteral("WhlMat").getString();
                MakerLabel = soln.getLiteral("MakerLabel").getString();
                MakerLoc = soln.getLiteral("MakerLoc").getString();
                
                RDFNode x = soln.get("Propertyval");
                String xx = String.valueOf(x);
                java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);
                String xs = xxx.toString();

            }
            MiscBodyMat2.setText(BodyMat);
            MiscBodystyle2.setText(Body);
            MiscLoc2.setText(MakerLoc);
            MiscManufacturer2.setText(MakerLabel);
            MiscModelName2.setText(modLabel);
            MiscModelType2.setText(VersionType);
//            MiscRoofMat2.setText();
//            MiscRoofMech2.setText();
            MiscUnits2.setText(Units);
            MiscWhlBolt2.setText(Bolting);
            MiscWhlMat2.setText(WhlMat);
            MiscWhlSpokes2.setText(Spokes);

        } catch (Exception ex) {
            ex.printStackTrace();
        }        
        

    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DisplayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DisplayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DisplayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DisplayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DisplayFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AspLabel3;
    private javax.swing.JLabel AspLabel4;
    private javax.swing.JLabel AspLabel5;
    private javax.swing.JLabel AspLabel7;
    private javax.swing.JLabel CapLabel11;
    private javax.swing.JLabel CapLabel2;
    private javax.swing.JLabel CapLabel3;
    private javax.swing.JLabel CapLabel5;
    private javax.swing.JLabel CapLabel7;
    private javax.swing.JLabel CapLabel8;
    private javax.swing.JLabel CylLabel1;
    private javax.swing.JLabel CylLabel2;
    private javax.swing.JLabel CylLabel3;
    private javax.swing.JLabel EngineLabel;
    private javax.swing.JLabel EngineLabel1;
    private javax.swing.JLabel EngineLabel2;
    private javax.swing.JPanel EnginePanel;
    private javax.swing.JLabel LayoutLabel4;
    private javax.swing.JLabel LayoutLabel5;
    private javax.swing.JLabel LayoutLabel6;
    private javax.swing.JLabel LayoutLabel8;
    private javax.swing.JLabel MiscBodyMat2;
    private javax.swing.JLabel MiscBodystyle2;
    private javax.swing.JLabel MiscLoc2;
    private javax.swing.JLabel MiscManufacturer2;
    private javax.swing.JLabel MiscModelName2;
    private javax.swing.JLabel MiscModelType2;
    private javax.swing.JLabel MiscUnits2;
    private javax.swing.JLabel MiscWhlBolt2;
    private javax.swing.JLabel MiscWhlMat2;
    private javax.swing.JLabel MiscWhlSpokes2;
    private javax.swing.JComboBox<String> ModelNamesComboBox;
    private javax.swing.JLabel PerfDrivetrainLabel1;
    private javax.swing.JLabel PerfDrivetrainLabel2;
    private javax.swing.JLabel PerfLabel1;
    private javax.swing.JLabel PerfLabel2;
    private javax.swing.JPanel PerfPanel;
    private javax.swing.JLabel PerfPowerLabel1;
    private javax.swing.JLabel PerfPowerLabel2;
    private javax.swing.JLabel PerfTorqueLabel1;
    private javax.swing.JLabel PerfTorqueLabel2;
    private javax.swing.JComboBox<String> SameEngComboBox1;
    private javax.swing.JLabel SameEngSpecLabel;
    private javax.swing.JLabel SameEngSpecLabel1;
    private javax.swing.JLabel SameEngSpecLabel2;
    private javax.swing.JComboBox<String> SamePerfComboBox2;
    private javax.swing.JComboBox<String> SameTComboBox3;
    private javax.swing.JLabel TGearsLabel1;
    private javax.swing.JLabel TGearsLabel2;
    private javax.swing.JLabel TLabel1;
    private javax.swing.JLabel TLabel2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox<String> variantsComboBox;
    // End of variables declaration//GEN-END:variables
}